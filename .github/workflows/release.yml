name: Go

on:
  push:
    branches:
      - master
      - 'feature/**'
    tags:
      - v*

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Build
        run: make build_amd64

      - name: Upload terrafmt for docker build
        uses: actions/upload-artifact@v1
        with:
          name: docker-binary
          path: terrafmt

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Build multiarch
        run: make -j4

      - name: Get the version
        id: get_version
        run: echo ::set-output name=version::${GITHUB_REF/refs\/tags\//}

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset Darwin 386
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./terrafmt-darwin-386.tar.gz
          asset_name: terrafmt-darwin-386.tar.gz
          asset_content_type: application/x-gtar

      - name: Upload Release Asset Linux 386
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./terrafmt-linux-386.tar.gz
          asset_name: terrafmt-linux-386.tar.gz
          asset_content_type: application/x-gtar

      - name: Upload Release Asset Linux amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./terrafmt-linux-amd64.tar.gz
          asset_name: terrafmt-linux-amd64.tar.gz
          asset_content_type: application/x-gtar

      - name: Upload Release Asset Linux arm64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./terrafmt-linux-arm64.tar.gz
          asset_name: terrafmt-linux-arm64.tar.gz
          asset_content_type: application/x-gtar

      - name: Upload Release Asset Linux arm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./terrafmt-linux-arm.tar.gz
          asset_name: terrafmt-linux-arm.tar.gz
          asset_content_type: application/x-gtar

      - name: Upload Release Asset Windows amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./terrafmt-windows-amd64.tar.gz
          asset_name: terrafmt-windows-amd64.tar.gz
          asset_content_type: application/x-gtar

      - name: Save output URL
        shell: bash
        run: echo -n "${{ steps.create_release.outputs.upload_url }}" > output-url.txt

      - name: Upload output URL
        uses: actions/upload-artifact@v1
        with:
          name: output-url
          path: output-url.txt

  publish_mac:
    name: Publish Mac (Signed)
    runs-on: macos-latest
    needs: publish
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Download output URL from Publish
        uses: actions/download-artifact@v1
        with:
          name: output-url

      - name: Set output URL
        id: create_release
        shell: bash
        run: echo "::set-output name=upload_url::$(cat output-url/output-url.txt)"

      - name: Install certs
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.DEVELOPER_PFX }}
          p12-password: ${{ secrets.PFX_PW }}

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14 

      - name: Get gon
        run: wget https://github.com/mitchellh/gon/releases/download/v0.2.3/gon_macos.zip && unzip gon_macos.zip && chmod +x gon

      - name: Build
        run: make mac_release
        env:
          APPLE_APP_PW: ${{ secrets.APPLE_APP_PW}}

      - name: Upload Release Asset Darwin amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./terrafmt-darwin-amd64.zip
          asset_name: terrafmt-darwin-amd64.zip
          asset_content_type: application/zip


  publish-docker:
    name: Publish Docker
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download terrafmt amd64
        uses: actions/download-artifact@v1
        with:
          name: docker-binary

      - name: Move binary
        run: mv docker-binary/terrafmt terrafmt

      - name: Login to docker hub
        uses: actions-hub/docker/login@master
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build :latest
        run: docker build -t terrycain/terrafmt:latest .

      - name: Push to docker hub :latest
        uses: actions-hub/docker@master
        with:
          args: push terrycain/terrafmt:latest

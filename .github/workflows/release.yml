name: Go

on:
  push:
    branches:
      - master
    tags:
      - v*

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Build
        run: go build -v

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14
        id: go

      - name: Build multiarch
        run: make -j4

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset Darwin 386
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./terrafmt-darwin-386.tar.gz
          asset_name: terrafmt-darwin-386.tar.gz
          asset_content_type: application/x-gtar

      - name: Upload Release Asset Darwin amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./terrafmt-darwin-amd64.tar.gz
          asset_name: terrafmt-darwin-amd64.tar.gz
          asset_content_type: application/x-gtar

      - name: Upload Release Asset Linux 386
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./terrafmt-linux-386.tar.gz
          asset_name: terrafmt-linux-386.tar.gz
          asset_content_type: application/x-gtar

      - name: Upload Release Asset Linux amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./terrafmt-linux-amd64.tar.gz
          asset_name: terrafmt-linux-amd64.tar.gz
          asset_content_type: application/x-gtar

      - name: Upload Release Asset Linux arm64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./terrafmt-linux-arm64.tar.gz
          asset_name: terrafmt-linux-arm64.tar.gz
          asset_content_type: application/x-gtar

      - name: Upload Release Asset Linux arm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./terrafmt-linux-arm.tar.gz
          asset_name: terrafmt-linux-arm.tar.gz
          asset_content_type: application/x-gtar

      - name: Upload Release Asset Windows amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./terrafmt-windows-amd64.tar.gz
          asset_name: terrafmt-windows-amd64.tar.gz
          asset_content_type: application/x-gtar
